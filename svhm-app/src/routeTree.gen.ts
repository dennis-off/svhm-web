/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TeamImport } from './routes/team'
import { Route as StatuteImport } from './routes/statute'
import { Route as ResourcesImport } from './routes/resources'
import { Route as ImpressumImport } from './routes/impressum'
import { Route as FaqImport } from './routes/faq'
import { Route as EventsImport } from './routes/events'
import { Route as ContactImport } from './routes/contact'
import { Route as BlogImport } from './routes/blog'
import { Route as IndexImport } from './routes/index'
import { Route as BlogsSlugImport } from './routes/blogs.$slug'

// Create/Update Routes

const TeamRoute = TeamImport.update({
  id: '/team',
  path: '/team',
  getParentRoute: () => rootRoute,
} as any)

const StatuteRoute = StatuteImport.update({
  id: '/statute',
  path: '/statute',
  getParentRoute: () => rootRoute,
} as any)

const ResourcesRoute = ResourcesImport.update({
  id: '/resources',
  path: '/resources',
  getParentRoute: () => rootRoute,
} as any)

const ImpressumRoute = ImpressumImport.update({
  id: '/impressum',
  path: '/impressum',
  getParentRoute: () => rootRoute,
} as any)

const FaqRoute = FaqImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => rootRoute,
} as any)

const EventsRoute = EventsImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => rootRoute,
} as any)

const ContactRoute = ContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any)

const BlogRoute = BlogImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const BlogsSlugRoute = BlogsSlugImport.update({
  id: '/blogs/$slug',
  path: '/blogs/$slug',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/blog': {
      id: '/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactImport
      parentRoute: typeof rootRoute
    }
    '/events': {
      id: '/events'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsImport
      parentRoute: typeof rootRoute
    }
    '/faq': {
      id: '/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof FaqImport
      parentRoute: typeof rootRoute
    }
    '/impressum': {
      id: '/impressum'
      path: '/impressum'
      fullPath: '/impressum'
      preLoaderRoute: typeof ImpressumImport
      parentRoute: typeof rootRoute
    }
    '/resources': {
      id: '/resources'
      path: '/resources'
      fullPath: '/resources'
      preLoaderRoute: typeof ResourcesImport
      parentRoute: typeof rootRoute
    }
    '/statute': {
      id: '/statute'
      path: '/statute'
      fullPath: '/statute'
      preLoaderRoute: typeof StatuteImport
      parentRoute: typeof rootRoute
    }
    '/team': {
      id: '/team'
      path: '/team'
      fullPath: '/team'
      preLoaderRoute: typeof TeamImport
      parentRoute: typeof rootRoute
    }
    '/blogs/$slug': {
      id: '/blogs/$slug'
      path: '/blogs/$slug'
      fullPath: '/blogs/$slug'
      preLoaderRoute: typeof BlogsSlugImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/blog': typeof BlogRoute
  '/contact': typeof ContactRoute
  '/events': typeof EventsRoute
  '/faq': typeof FaqRoute
  '/impressum': typeof ImpressumRoute
  '/resources': typeof ResourcesRoute
  '/statute': typeof StatuteRoute
  '/team': typeof TeamRoute
  '/blogs/$slug': typeof BlogsSlugRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/blog': typeof BlogRoute
  '/contact': typeof ContactRoute
  '/events': typeof EventsRoute
  '/faq': typeof FaqRoute
  '/impressum': typeof ImpressumRoute
  '/resources': typeof ResourcesRoute
  '/statute': typeof StatuteRoute
  '/team': typeof TeamRoute
  '/blogs/$slug': typeof BlogsSlugRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/blog': typeof BlogRoute
  '/contact': typeof ContactRoute
  '/events': typeof EventsRoute
  '/faq': typeof FaqRoute
  '/impressum': typeof ImpressumRoute
  '/resources': typeof ResourcesRoute
  '/statute': typeof StatuteRoute
  '/team': typeof TeamRoute
  '/blogs/$slug': typeof BlogsSlugRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/blog'
    | '/contact'
    | '/events'
    | '/faq'
    | '/impressum'
    | '/resources'
    | '/statute'
    | '/team'
    | '/blogs/$slug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/blog'
    | '/contact'
    | '/events'
    | '/faq'
    | '/impressum'
    | '/resources'
    | '/statute'
    | '/team'
    | '/blogs/$slug'
  id:
    | '__root__'
    | '/'
    | '/blog'
    | '/contact'
    | '/events'
    | '/faq'
    | '/impressum'
    | '/resources'
    | '/statute'
    | '/team'
    | '/blogs/$slug'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlogRoute: typeof BlogRoute
  ContactRoute: typeof ContactRoute
  EventsRoute: typeof EventsRoute
  FaqRoute: typeof FaqRoute
  ImpressumRoute: typeof ImpressumRoute
  ResourcesRoute: typeof ResourcesRoute
  StatuteRoute: typeof StatuteRoute
  TeamRoute: typeof TeamRoute
  BlogsSlugRoute: typeof BlogsSlugRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlogRoute: BlogRoute,
  ContactRoute: ContactRoute,
  EventsRoute: EventsRoute,
  FaqRoute: FaqRoute,
  ImpressumRoute: ImpressumRoute,
  ResourcesRoute: ResourcesRoute,
  StatuteRoute: StatuteRoute,
  TeamRoute: TeamRoute,
  BlogsSlugRoute: BlogsSlugRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/blog",
        "/contact",
        "/events",
        "/faq",
        "/impressum",
        "/resources",
        "/statute",
        "/team",
        "/blogs/$slug"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/blog": {
      "filePath": "blog.tsx"
    },
    "/contact": {
      "filePath": "contact.tsx"
    },
    "/events": {
      "filePath": "events.tsx"
    },
    "/faq": {
      "filePath": "faq.tsx"
    },
    "/impressum": {
      "filePath": "impressum.tsx"
    },
    "/resources": {
      "filePath": "resources.tsx"
    },
    "/statute": {
      "filePath": "statute.tsx"
    },
    "/team": {
      "filePath": "team.tsx"
    },
    "/blogs/$slug": {
      "filePath": "blogs.$slug.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
