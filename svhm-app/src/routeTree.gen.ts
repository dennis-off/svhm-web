/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as BlogsSlugImport } from './routes/blogs.$slug'

// Create Virtual Routes

const TeamLazyImport = createFileRoute('/team')()
const StatuteLazyImport = createFileRoute('/statute')()
const ResourcesLazyImport = createFileRoute('/resources')()
const ImpressumLazyImport = createFileRoute('/impressum')()
const FaqLazyImport = createFileRoute('/faq')()
const EventsLazyImport = createFileRoute('/events')()
const ContactLazyImport = createFileRoute('/contact')()
const BlogLazyImport = createFileRoute('/blog')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const TeamLazyRoute = TeamLazyImport.update({
  id: '/team',
  path: '/team',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/team.lazy').then((d) => d.Route))

const StatuteLazyRoute = StatuteLazyImport.update({
  id: '/statute',
  path: '/statute',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/statute.lazy').then((d) => d.Route))

const ResourcesLazyRoute = ResourcesLazyImport.update({
  id: '/resources',
  path: '/resources',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/resources.lazy').then((d) => d.Route))

const ImpressumLazyRoute = ImpressumLazyImport.update({
  id: '/impressum',
  path: '/impressum',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/impressum.lazy').then((d) => d.Route))

const FaqLazyRoute = FaqLazyImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/faq.lazy').then((d) => d.Route))

const EventsLazyRoute = EventsLazyImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/events.lazy').then((d) => d.Route))

const ContactLazyRoute = ContactLazyImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/contact.lazy').then((d) => d.Route))

const BlogLazyRoute = BlogLazyImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/blog.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const BlogsSlugRoute = BlogsSlugImport.update({
  id: '/blogs/$slug',
  path: '/blogs/$slug',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/blog': {
      id: '/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogLazyImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactLazyImport
      parentRoute: typeof rootRoute
    }
    '/events': {
      id: '/events'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsLazyImport
      parentRoute: typeof rootRoute
    }
    '/faq': {
      id: '/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof FaqLazyImport
      parentRoute: typeof rootRoute
    }
    '/impressum': {
      id: '/impressum'
      path: '/impressum'
      fullPath: '/impressum'
      preLoaderRoute: typeof ImpressumLazyImport
      parentRoute: typeof rootRoute
    }
    '/resources': {
      id: '/resources'
      path: '/resources'
      fullPath: '/resources'
      preLoaderRoute: typeof ResourcesLazyImport
      parentRoute: typeof rootRoute
    }
    '/statute': {
      id: '/statute'
      path: '/statute'
      fullPath: '/statute'
      preLoaderRoute: typeof StatuteLazyImport
      parentRoute: typeof rootRoute
    }
    '/team': {
      id: '/team'
      path: '/team'
      fullPath: '/team'
      preLoaderRoute: typeof TeamLazyImport
      parentRoute: typeof rootRoute
    }
    '/blogs/$slug': {
      id: '/blogs/$slug'
      path: '/blogs/$slug'
      fullPath: '/blogs/$slug'
      preLoaderRoute: typeof BlogsSlugImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/blog': typeof BlogLazyRoute
  '/contact': typeof ContactLazyRoute
  '/events': typeof EventsLazyRoute
  '/faq': typeof FaqLazyRoute
  '/impressum': typeof ImpressumLazyRoute
  '/resources': typeof ResourcesLazyRoute
  '/statute': typeof StatuteLazyRoute
  '/team': typeof TeamLazyRoute
  '/blogs/$slug': typeof BlogsSlugRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/blog': typeof BlogLazyRoute
  '/contact': typeof ContactLazyRoute
  '/events': typeof EventsLazyRoute
  '/faq': typeof FaqLazyRoute
  '/impressum': typeof ImpressumLazyRoute
  '/resources': typeof ResourcesLazyRoute
  '/statute': typeof StatuteLazyRoute
  '/team': typeof TeamLazyRoute
  '/blogs/$slug': typeof BlogsSlugRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/blog': typeof BlogLazyRoute
  '/contact': typeof ContactLazyRoute
  '/events': typeof EventsLazyRoute
  '/faq': typeof FaqLazyRoute
  '/impressum': typeof ImpressumLazyRoute
  '/resources': typeof ResourcesLazyRoute
  '/statute': typeof StatuteLazyRoute
  '/team': typeof TeamLazyRoute
  '/blogs/$slug': typeof BlogsSlugRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/blog'
    | '/contact'
    | '/events'
    | '/faq'
    | '/impressum'
    | '/resources'
    | '/statute'
    | '/team'
    | '/blogs/$slug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/blog'
    | '/contact'
    | '/events'
    | '/faq'
    | '/impressum'
    | '/resources'
    | '/statute'
    | '/team'
    | '/blogs/$slug'
  id:
    | '__root__'
    | '/'
    | '/blog'
    | '/contact'
    | '/events'
    | '/faq'
    | '/impressum'
    | '/resources'
    | '/statute'
    | '/team'
    | '/blogs/$slug'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  BlogLazyRoute: typeof BlogLazyRoute
  ContactLazyRoute: typeof ContactLazyRoute
  EventsLazyRoute: typeof EventsLazyRoute
  FaqLazyRoute: typeof FaqLazyRoute
  ImpressumLazyRoute: typeof ImpressumLazyRoute
  ResourcesLazyRoute: typeof ResourcesLazyRoute
  StatuteLazyRoute: typeof StatuteLazyRoute
  TeamLazyRoute: typeof TeamLazyRoute
  BlogsSlugRoute: typeof BlogsSlugRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  BlogLazyRoute: BlogLazyRoute,
  ContactLazyRoute: ContactLazyRoute,
  EventsLazyRoute: EventsLazyRoute,
  FaqLazyRoute: FaqLazyRoute,
  ImpressumLazyRoute: ImpressumLazyRoute,
  ResourcesLazyRoute: ResourcesLazyRoute,
  StatuteLazyRoute: StatuteLazyRoute,
  TeamLazyRoute: TeamLazyRoute,
  BlogsSlugRoute: BlogsSlugRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/blog",
        "/contact",
        "/events",
        "/faq",
        "/impressum",
        "/resources",
        "/statute",
        "/team",
        "/blogs/$slug"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/blog": {
      "filePath": "blog.lazy.tsx"
    },
    "/contact": {
      "filePath": "contact.lazy.tsx"
    },
    "/events": {
      "filePath": "events.lazy.tsx"
    },
    "/faq": {
      "filePath": "faq.lazy.tsx"
    },
    "/impressum": {
      "filePath": "impressum.lazy.tsx"
    },
    "/resources": {
      "filePath": "resources.lazy.tsx"
    },
    "/statute": {
      "filePath": "statute.lazy.tsx"
    },
    "/team": {
      "filePath": "team.lazy.tsx"
    },
    "/blogs/$slug": {
      "filePath": "blogs.$slug.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
